name: Build and Deploy Telegram Bot

on:
  push:
    branches:
      - main

env:
  IMAGE_NAME: telegram_bot:latest

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Build Docker Image
        run: |
          docker build -t $IMAGE_NAME .
          docker save $IMAGE_NAME | gzip > telegram_bot_image.tar.gz
          ls -la

      - name: Upload Docker Image as Artifact
        uses: actions/upload-artifact@v4
        with:
          name: telegram_bot_image
          path: ./telegram_bot_image.tar.gz

  deploy:
    runs-on: ubuntu-latest
    needs: build

    steps:
      - name: Check out repository
        uses: actions/checkout@v4

      - name: Download Docker Image
        uses: actions/download-artifact@v4
        with:
          name: telegram_bot_image
          path: ./
      
      - name: Verify files exist
        run: |
          ls -la
          if [ ! -f docker-compose.yml ]; then
            echo "docker-compose.yml not found!" >&2
            exit 1
          fi
          if [ ! -f telegram_bot_image.tar.gz ]; then
            echo "telegram_bot_image.tar.gz not found!" >&2
            exit 1
          fi
      
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./docker-compose.yml"
          target: "~/telegram_bot/"
          overwrite: true
          debug: true

      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          source: "./telegram_bot_image.tar.gz"
          target: "~/telegram_bot/"
          overwrite: true
          debug: true

      - name: Deploy to Server via SSH
        uses: appleboy/ssh-action@master
        with:
          host: ${{ secrets.SERVER_HOST }}
          username: ${{ secrets.SERVER_USER }}
          key: ${{ secrets.SERVER_SSH_KEY }}
          script: |
              set -e
              cd ~/telegram_bot
              docker-compose -f docker-compose.yml config > docker-compose.$(date +%Y%m%d_%H%M%S).yml
              gzip -df telegram_bot_image.tar.gz
              docker load < telegram_bot_image.tar
              docker-compose down
              if [ $? -ne 0 ]; then
                  echo "Failed to stop containers" >&2
                  exit 1
              fi
              docker-compose up -d
              sleep 10
              docker-compose ps --quiet | xargs docker inspect --format '{{.State.Health.Status}}' | grep -v healthy && exit 1